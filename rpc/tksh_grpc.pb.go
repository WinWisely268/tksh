// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// TkshServiceClient is the client API for TkshService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TkshServiceClient interface {
	// hide
	NewTransfer(ctx context.Context, opts ...grpc.CallOption) (TkshService_NewTransferClient, error)
	// hide
	UpdateTransfer(ctx context.Context, opts ...grpc.CallOption) (TkshService_UpdateTransferClient, error)
	GetReport(ctx context.Context, in *ReportRequest, opts ...grpc.CallOption) (*ReportAll, error)
}

type tkshServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTkshServiceClient(cc grpc.ClientConnInterface) TkshServiceClient {
	return &tkshServiceClient{cc}
}

var tkshServiceNewTransferStreamDesc = &grpc.StreamDesc{
	StreamName:    "NewTransfer",
	ClientStreams: true,
}

func (c *tkshServiceClient) NewTransfer(ctx context.Context, opts ...grpc.CallOption) (TkshService_NewTransferClient, error) {
	stream, err := c.cc.NewStream(ctx, tkshServiceNewTransferStreamDesc, "/TkshService/NewTransfer", opts...)
	if err != nil {
		return nil, err
	}
	x := &tkshServiceNewTransferClient{stream}
	return x, nil
}

type TkshService_NewTransferClient interface {
	Send(*NewTransferRecord) error
	CloseAndRecv() (*TransferRecord, error)
	grpc.ClientStream
}

type tkshServiceNewTransferClient struct {
	grpc.ClientStream
}

func (x *tkshServiceNewTransferClient) Send(m *NewTransferRecord) error {
	return x.ClientStream.SendMsg(m)
}

func (x *tkshServiceNewTransferClient) CloseAndRecv() (*TransferRecord, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(TransferRecord)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var tkshServiceUpdateTransferStreamDesc = &grpc.StreamDesc{
	StreamName:    "UpdateTransfer",
	ClientStreams: true,
}

func (c *tkshServiceClient) UpdateTransfer(ctx context.Context, opts ...grpc.CallOption) (TkshService_UpdateTransferClient, error) {
	stream, err := c.cc.NewStream(ctx, tkshServiceUpdateTransferStreamDesc, "/TkshService/UpdateTransfer", opts...)
	if err != nil {
		return nil, err
	}
	x := &tkshServiceUpdateTransferClient{stream}
	return x, nil
}

type TkshService_UpdateTransferClient interface {
	Send(*UpdateTransferRecord) error
	CloseAndRecv() (*TransferRecord, error)
	grpc.ClientStream
}

type tkshServiceUpdateTransferClient struct {
	grpc.ClientStream
}

func (x *tkshServiceUpdateTransferClient) Send(m *UpdateTransferRecord) error {
	return x.ClientStream.SendMsg(m)
}

func (x *tkshServiceUpdateTransferClient) CloseAndRecv() (*TransferRecord, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(TransferRecord)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var tkshServiceGetReportStreamDesc = &grpc.StreamDesc{
	StreamName: "GetReport",
}

func (c *tkshServiceClient) GetReport(ctx context.Context, in *ReportRequest, opts ...grpc.CallOption) (*ReportAll, error) {
	out := new(ReportAll)
	err := c.cc.Invoke(ctx, "/TkshService/GetReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TkshServiceService is the service API for TkshService service.
// Fields should be assigned to their respective handler implementations only before
// RegisterTkshServiceService is called.  Any unassigned fields will result in the
// handler for that method returning an Unimplemented error.
type TkshServiceService struct {
	// hide
	NewTransfer func(TkshService_NewTransferServer) error
	// hide
	UpdateTransfer func(TkshService_UpdateTransferServer) error
	GetReport      func(context.Context, *ReportRequest) (*ReportAll, error)
}

func (s *TkshServiceService) newTransfer(_ interface{}, stream grpc.ServerStream) error {
	if s.NewTransfer == nil {
		return status.Errorf(codes.Unimplemented, "method NewTransfer not implemented")
	}
	return s.NewTransfer(&tkshServiceNewTransferServer{stream})
}
func (s *TkshServiceService) updateTransfer(_ interface{}, stream grpc.ServerStream) error {
	if s.UpdateTransfer == nil {
		return status.Errorf(codes.Unimplemented, "method UpdateTransfer not implemented")
	}
	return s.UpdateTransfer(&tkshServiceUpdateTransferServer{stream})
}
func (s *TkshServiceService) getReport(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	if s.GetReport == nil {
		return nil, status.Errorf(codes.Unimplemented, "method GetReport not implemented")
	}
	in := new(ReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.GetReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/TkshService/GetReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.GetReport(ctx, req.(*ReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

type TkshService_NewTransferServer interface {
	SendAndClose(*TransferRecord) error
	Recv() (*NewTransferRecord, error)
	grpc.ServerStream
}

type tkshServiceNewTransferServer struct {
	grpc.ServerStream
}

func (x *tkshServiceNewTransferServer) SendAndClose(m *TransferRecord) error {
	return x.ServerStream.SendMsg(m)
}

func (x *tkshServiceNewTransferServer) Recv() (*NewTransferRecord, error) {
	m := new(NewTransferRecord)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

type TkshService_UpdateTransferServer interface {
	SendAndClose(*TransferRecord) error
	Recv() (*UpdateTransferRecord, error)
	grpc.ServerStream
}

type tkshServiceUpdateTransferServer struct {
	grpc.ServerStream
}

func (x *tkshServiceUpdateTransferServer) SendAndClose(m *TransferRecord) error {
	return x.ServerStream.SendMsg(m)
}

func (x *tkshServiceUpdateTransferServer) Recv() (*UpdateTransferRecord, error) {
	m := new(UpdateTransferRecord)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RegisterTkshServiceService registers a service implementation with a gRPC server.
func RegisterTkshServiceService(s grpc.ServiceRegistrar, srv *TkshServiceService) {
	sd := grpc.ServiceDesc{
		ServiceName: "TkshService",
		Methods: []grpc.MethodDesc{
			{
				MethodName: "GetReport",
				Handler:    srv.getReport,
			},
		},
		Streams: []grpc.StreamDesc{
			{
				StreamName:    "NewTransfer",
				Handler:       srv.newTransfer,
				ClientStreams: true,
			},
			{
				StreamName:    "UpdateTransfer",
				Handler:       srv.updateTransfer,
				ClientStreams: true,
			},
		},
		Metadata: "tksh.proto",
	}

	s.RegisterService(&sd, nil)
}

// NewTkshServiceService creates a new TkshServiceService containing the
// implemented methods of the TkshService service in s.  Any unimplemented
// methods will result in the gRPC server returning an UNIMPLEMENTED status to the client.
// This includes situations where the method handler is misspelled or has the wrong
// signature.  For this reason, this function should be used with great care and
// is not recommended to be used by most users.
func NewTkshServiceService(s interface{}) *TkshServiceService {
	ns := &TkshServiceService{}
	if h, ok := s.(interface {
		NewTransfer(TkshService_NewTransferServer) error
	}); ok {
		ns.NewTransfer = h.NewTransfer
	}
	if h, ok := s.(interface {
		UpdateTransfer(TkshService_UpdateTransferServer) error
	}); ok {
		ns.UpdateTransfer = h.UpdateTransfer
	}
	if h, ok := s.(interface {
		GetReport(context.Context, *ReportRequest) (*ReportAll, error)
	}); ok {
		ns.GetReport = h.GetReport
	}
	return ns
}

// UnstableTkshServiceService is the service API for TkshService service.
// New methods may be added to this interface if they are added to the service
// definition, which is not a backward-compatible change.  For this reason,
// use of this type is not recommended.
type UnstableTkshServiceService interface {
	// hide
	NewTransfer(TkshService_NewTransferServer) error
	// hide
	UpdateTransfer(TkshService_UpdateTransferServer) error
	GetReport(context.Context, *ReportRequest) (*ReportAll, error)
}
