[{"/Users/alex/workspace/tksh/pwa-frontend/src/index.tsx":"1","/Users/alex/workspace/tksh/pwa-frontend/src/app/DashboardBar.tsx":"2","/Users/alex/workspace/tksh/pwa-frontend/src/components/Table/index.tsx":"3","/Users/alex/workspace/tksh/pwa-frontend/src/components/Table/filters/index.ts":"4","/Users/alex/workspace/tksh/pwa-frontend/src/components/Loader/index.tsx":"5","/Users/alex/workspace/tksh/pwa-frontend/src/components/Snackbar.tsx":"6","/Users/alex/workspace/tksh/pwa-frontend/src/components/Table/DebugDump.tsx":"7","/Users/alex/workspace/tksh/pwa-frontend/src/shared/utilities/aggregators.tsx":"8","/Users/alex/workspace/tksh/pwa-frontend/src/shared/utilities/index.ts":"9","/Users/alex/workspace/tksh/pwa-frontend/src/components/Table/filters/numericFilter.tsx":"10","/Users/alex/workspace/tksh/pwa-frontend/src/shared/utilities/useDebounce.tsx":"11","/Users/alex/workspace/tksh/pwa-frontend/src/app/App.tsx":"12","/Users/alex/workspace/tksh/pwa-frontend/src/rpc/TkshServiceClientPb.ts":"13","/Users/alex/workspace/tksh/pwa-frontend/src/shared/utilities/useLocalStorage.tsx":"14","/Users/alex/workspace/tksh/pwa-frontend/src/shared/service/client.ts":"15","/Users/alex/workspace/tksh/pwa-frontend/src/components/Table/ResizeHandle.tsx":"16","/Users/alex/workspace/tksh/pwa-frontend/src/shared/utilities/object.ts":"17","/Users/alex/workspace/tksh/pwa-frontend/src/shared/utilities/validators.ts":"18","/Users/alex/workspace/tksh/pwa-frontend/src/components/Table/ColumnHidePage.tsx":"19","/Users/alex/workspace/tksh/pwa-frontend/src/components/Table/Table.tsx":"20","/Users/alex/workspace/tksh/pwa-frontend/src/components/Table/FilterChipBar.tsx":"21","/Users/alex/workspace/tksh/pwa-frontend/src/reportWebVitals.ts":"22","/Users/alex/workspace/tksh/pwa-frontend/src/serviceWorkerRegistration.ts":"23","/Users/alex/workspace/tksh/pwa-frontend/src/components/Table/TableStyles.tsx":"24"},{"size":876,"mtime":1608654205123,"results":"25","hashOfConfig":"26"},{"size":2609,"mtime":1608651896692,"results":"27","hashOfConfig":"26"},{"size":24,"mtime":1608644779442,"results":"28","hashOfConfig":"26"},{"size":62,"mtime":1608644779442,"results":"29","hashOfConfig":"26"},{"size":1386,"mtime":1608650496492,"results":"30","hashOfConfig":"26"},{"size":3818,"mtime":1608658835977,"results":"31","hashOfConfig":"26"},{"size":1225,"mtime":1608644779440,"results":"32","hashOfConfig":"26"},{"size":4896,"mtime":1608658955507,"results":"33","hashOfConfig":"26"},{"size":178,"mtime":1608644779445,"results":"34","hashOfConfig":"26"},{"size":1227,"mtime":1608644779442,"results":"35","hashOfConfig":"26"},{"size":1341,"mtime":1608644779445,"results":"36","hashOfConfig":"26"},{"size":303,"mtime":1608644779438,"results":"37","hashOfConfig":"26"},{"size":1999,"mtime":1608651535049,"results":"38","hashOfConfig":"26"},{"size":1187,"mtime":1608644779446,"results":"39","hashOfConfig":"26"},{"size":241,"mtime":1608646263435,"results":"40","hashOfConfig":"26"},{"size":524,"mtime":1608644779441,"results":"41","hashOfConfig":"26"},{"size":2351,"mtime":1608659118528,"results":"42","hashOfConfig":"26"},{"size":526,"mtime":1608644779446,"results":"43","hashOfConfig":"26"},{"size":2660,"mtime":1608650519615,"results":"44","hashOfConfig":"26"},{"size":9583,"mtime":1608644779441,"results":"45","hashOfConfig":"26"},{"size":2139,"mtime":1608650544487,"results":"46","hashOfConfig":"26"},{"size":425,"mtime":1608644779443,"results":"47","hashOfConfig":"26"},{"size":5256,"mtime":1608644779444,"results":"48","hashOfConfig":"26"},{"size":3775,"mtime":1608644779441,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"zmzywy",{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"56"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"96"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/alex/workspace/tksh/pwa-frontend/src/index.tsx",[],["106","107"],"/Users/alex/workspace/tksh/pwa-frontend/src/app/DashboardBar.tsx",["108"],"import React, { useState } from 'react'\nimport {\n  Drawer,\n  Toolbar,\n  AppBar,\n  Typography,\n  Divider,\n  IconButton\n} from '@material-ui/core'\nimport HomeIcon from '@material-ui/icons/Home'\nimport MenuIcon from '@material-ui/icons/Menu'\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft'\nimport cx from 'classnames'\nimport * as H from 'history'\nimport { useStyles } from './DashboardLayout'\n\nexport interface DashboardBarProps {\n  drawerWidth: number\n  history: H.History<H.LocationState>\n}\n\nconst DashboardBar: React.FunctionComponent<DashboardBarProps> = ({\n  drawerWidth,\n  history\n}) => {\n  const [open, setOpen] = useState(false)\n  const classes = useStyles()\n\n  const handleDrawerOpen = () => {\n    setOpen(true)\n  }\n  const handleDrawerClose = () => {\n    setOpen(false)\n  }\n\n  return (\n    <React.Fragment>\n      <AppBar\n        position='absolute'\n        className={cx(classes.appBar, open && classes.appBarShift)}\n      >\n        <Toolbar className={classes.toolbar}>\n          <IconButton\n            edge='start'\n            color='inherit'\n            aria-label='open drawer'\n            onClick={handleDrawerOpen}\n            className={cx(classes.menuButton, open && classes.menuButtonHidden)}\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography\n            component='h1'\n            variant='h6'\n            color='inherit'\n            noWrap\n            className={classes.title}\n          >\n            Laporan Kaca Sentrum 2020\n          </Typography>\n          <div className={classes.actions}>\n            {/*<IconButton*/}\n            {/*  edge='start'*/}\n            {/*  className={classes.menuButton}*/}\n            {/*  onClick={() => history.push('/')}*/}\n            {/*  color='inherit'*/}\n            {/*  aria-label='home'*/}\n            {/*>*/}\n            {/*  /!*<HomeIcon />*!/*/}\n            {/*</IconButton>*/}\n          </div>\n        </Toolbar>\n      </AppBar>\n      <Drawer\n        variant='temporary'\n        classes={{\n          paper: cx(classes.drawerPaper, !open && classes.drawerPaperClose)\n        }}\n        open={open}\n      >\n        <div className={classes.sidebarHeader}>\n          <Typography\n            component='h2'\n            variant='h6'\n            color='inherit'\n            noWrap\n            className={classes.sidebarTitle}\n          >\n            Kaca Menu\n          </Typography>\n          <IconButton onClick={handleDrawerClose}>\n            <ChevronLeftIcon />\n          </IconButton>\n        </div>\n        <Divider />\n      </Drawer>\n    </React.Fragment>\n  )\n}\n\nexport default DashboardBar\n",["109","110"],"/Users/alex/workspace/tksh/pwa-frontend/src/components/Table/index.tsx",[],"/Users/alex/workspace/tksh/pwa-frontend/src/components/Table/filters/index.ts",[],"/Users/alex/workspace/tksh/pwa-frontend/src/components/Loader/index.tsx",[],"/Users/alex/workspace/tksh/pwa-frontend/src/components/Snackbar.tsx",[],"/Users/alex/workspace/tksh/pwa-frontend/src/components/Table/DebugDump.tsx",[],["111","112"],"/Users/alex/workspace/tksh/pwa-frontend/src/shared/utilities/aggregators.tsx",[],"/Users/alex/workspace/tksh/pwa-frontend/src/shared/utilities/index.ts",[],"/Users/alex/workspace/tksh/pwa-frontend/src/components/Table/filters/numericFilter.tsx",[],"/Users/alex/workspace/tksh/pwa-frontend/src/shared/utilities/useDebounce.tsx",[],"/Users/alex/workspace/tksh/pwa-frontend/src/app/App.tsx",[],"/Users/alex/workspace/tksh/pwa-frontend/src/rpc/TkshServiceClientPb.ts",[],"/Users/alex/workspace/tksh/pwa-frontend/src/shared/utilities/useLocalStorage.tsx",[],"/Users/alex/workspace/tksh/pwa-frontend/src/shared/service/client.ts",[],["113","114"],"/Users/alex/workspace/tksh/pwa-frontend/src/components/Table/ResizeHandle.tsx",[],"/Users/alex/workspace/tksh/pwa-frontend/src/shared/utilities/object.ts",[],"/Users/alex/workspace/tksh/pwa-frontend/src/shared/utilities/validators.ts",[],"/Users/alex/workspace/tksh/pwa-frontend/src/components/Table/ColumnHidePage.tsx",[],"/Users/alex/workspace/tksh/pwa-frontend/src/components/Table/Table.tsx",["115","116"],"import { TableSortLabel, TextField } from '@material-ui/core'\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight'\nimport KeyboardArrowUp from '@material-ui/icons/KeyboardArrowUp'\nimport cx from 'classnames'\nimport React, {\n  CSSProperties,\n  MouseEventHandler,\n  PropsWithChildren,\n  ReactElement,\n  useEffect\n} from 'react'\nimport {\n  Cell,\n  CellProps,\n  FilterProps,\n  HeaderGroup,\n  HeaderProps,\n  Hooks,\n  Meta,\n  Row,\n  TableInstance,\n  TableOptions,\n  useColumnOrder,\n  useExpanded,\n  useFilters,\n  useFlexLayout,\n  useGroupBy,\n  usePagination,\n  useResizeColumns,\n  useRowSelect,\n  useSortBy,\n  useTable\n} from 'react-table'\n\nimport {\n  camelToWords,\n  useDebounce,\n  useLocalStorage\n} from '../../shared/utilities'\nimport { DumpInstance } from './DebugDump'\nimport { FilterChipBar } from './FilterChipBar'\nimport { fuzzyTextFilter, numericTextFilter } from './filters'\nimport { ResizeHandle } from './ResizeHandle'\nimport { TablePagination } from './TablePagination'\nimport { HeaderCheckbox, RowCheckbox, useStyles } from './TableStyles'\nimport { TableToolbar } from './TableToolbar'\nimport { TooltipCell } from './TooltipCell'\n\nexport interface Table<T extends object = {}> extends TableOptions<T> {\n  name: string\n  onAdd?: (instance: TableInstance<T>) => MouseEventHandler\n  onDelete?: (instance: TableInstance<T>) => MouseEventHandler\n  onEdit?: (instance: TableInstance<T>) => MouseEventHandler\n  onClick?: (row: Row<T>) => void\n}\n\nconst DefaultHeader: React.FC<HeaderProps<any>> = ({ column }) => (\n  <>{column.id.startsWith('_') ? null : camelToWords(column.id)}</>\n)\n\nfunction DefaultColumnFilter<T extends object>({\n  column: { id, index, filterValue, setFilter, render, parent }\n}: FilterProps<T>) {\n  const [value, setValue] = React.useState(filterValue || '')\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setValue(event.target.value)\n  }\n  // ensure that reset loads the new value\n  useEffect(() => {\n    setValue(filterValue || '')\n  }, [filterValue])\n\n  const firstIndex = !(parent && parent.index)\n  return (\n    <TextField\n      name={id}\n      label={render('Header')}\n      value={value}\n      autoFocus={index === 0 && firstIndex}\n      variant={'standard'}\n      onChange={handleChange}\n      onBlur={(e) => {\n        setFilter(e.target.value || undefined)\n      }}\n    />\n  )\n}\n\nconst getStyles = <T extends object>(\n  props: any,\n  disableResizing = false,\n  align = 'left'\n) => [\n  props,\n  {\n    style: {\n      justifyContent: align === 'right' ? 'flex-end' : 'flex-start',\n      alignItems: 'flex-start',\n      display: 'flex'\n    }\n  }\n]\n\nconst selectionHook = (hooks: Hooks<any>) => {\n  hooks.allColumns.push((columns) => [\n    // Let's make a column for selection\n    {\n      id: '_selector',\n      disableResizing: true,\n      disableGroupBy: true,\n      minWidth: 45,\n      width: 45,\n      maxWidth: 45,\n      // The header can use the table's getToggleAllRowsSelectedProps method\n      // to render a checkbox\n      Header: ({ getToggleAllRowsSelectedProps }: HeaderProps<any>) => (\n        <HeaderCheckbox {...getToggleAllRowsSelectedProps()} />\n      ),\n      // The cell can use the individual row's getToggleRowSelectedProps method\n      // to the render a checkbox\n      Cell: ({ row }: CellProps<any>) => (\n        <RowCheckbox {...row.getToggleRowSelectedProps()} />\n      )\n    },\n    ...columns\n  ])\n  hooks.useInstanceBeforeDimensions.push(({ headerGroups }) => {\n    // fix the parent group of the selection button to not be resizable\n    const selectionGroupHeader = headerGroups[0].headers[0]\n    selectionGroupHeader.canResize = false\n  })\n}\n\nconst headerProps = <T extends object>(\n  props: any,\n  { column }: Meta<T, { column: HeaderGroup<T> }>\n) => getStyles(props, column && column.disableResizing, column && column.align)\n\nconst cellProps = <T extends object>(\n  props: any,\n  { cell }: Meta<T, { cell: Cell<T> }>\n) =>\n  getStyles(\n    props,\n    cell.column && cell.column.disableResizing,\n    cell.column && cell.column.align\n  )\n\nconst defaultColumn = {\n  Filter: DefaultColumnFilter,\n  Cell: TooltipCell,\n  Header: DefaultHeader,\n  // When using the useFlexLayout:\n  minWidth: 30, // minWidth is only used as a limit for resizing\n  width: 150, // width is used for both the flex-basis and flex-grow\n  maxWidth: 200 // maxWidth is only used as a limit for resizing\n}\n\nconst hooks = [\n  useColumnOrder,\n  useFilters,\n  useGroupBy,\n  useSortBy,\n  useExpanded,\n  useFlexLayout,\n  usePagination,\n  useResizeColumns,\n  useRowSelect,\n  selectionHook\n]\n\nconst filterTypes = {\n  fuzzyText: fuzzyTextFilter,\n  numeric: numericTextFilter\n}\n\nexport function Table<T extends object>(\n  props: PropsWithChildren<Table<T>>\n): ReactElement {\n  const { name, columns, onAdd, onDelete, onEdit, onClick } = props\n  const classes = useStyles()\n\n  const [initialState, setInitialState] = useLocalStorage(\n    `tableState:${name}`,\n    {}\n  )\n  const instance = useTable<T>(\n    {\n      ...props,\n      columns,\n      filterTypes,\n      defaultColumn,\n      initialState\n    },\n    ...hooks\n  )\n\n  const {\n    getTableProps,\n    headerGroups,\n    getTableBodyProps,\n    page,\n    prepareRow,\n    state\n  } = instance\n  const debouncedState = useDebounce(state, 500)\n\n  useEffect(() => {\n    const {\n      sortBy,\n      filters,\n      pageSize,\n      columnResizing,\n      hiddenColumns\n    } = debouncedState\n    const val = {\n      sortBy,\n      filters,\n      pageSize,\n      columnResizing,\n      hiddenColumns\n    }\n    setInitialState(val)\n  }, [setInitialState, debouncedState])\n\n  const cellClickHandler = (cell: Cell<T>) => () => {\n    onClick && cell.column.id !== '_selector' && onClick(cell.row)\n  }\n\n  return (\n    <>\n      <TableToolbar instance={instance} {...{ onAdd, onDelete, onEdit }} />\n      <FilterChipBar<T> instance={instance} />\n      <div className={classes.tableTable} {...getTableProps()}>\n        <div>\n          {headerGroups.map((headerGroup) => (\n            <div\n              {...headerGroup.getHeaderGroupProps()}\n              className={classes.tableHeadRow}\n            >\n              {headerGroup.headers.map((column) => {\n                const style = {\n                  textAlign: column.align ? column.align : 'left '\n                } as CSSProperties\n                return (\n                  <div\n                    {...column.getHeaderProps(headerProps)}\n                    className={classes.tableHeadCell}\n                  >\n                    {column.canGroupBy && (\n                      <TableSortLabel\n                        active\n                        direction={column.isGrouped ? 'desc' : 'asc'}\n                        IconComponent={KeyboardArrowRight}\n                        {...column.getGroupByToggleProps()}\n                        className={classes.headerIcon}\n                      />\n                    )}\n                    {column.canSort ? (\n                      <TableSortLabel\n                        active={column.isSorted}\n                        direction={column.isSortedDesc ? 'desc' : 'asc'}\n                        {...column.getSortByToggleProps()}\n                        className={classes.tableSortLabel}\n                        style={style}\n                      >\n                        {column.render('Header')}\n                      </TableSortLabel>\n                    ) : (\n                      <div style={style} className={classes.tableLabel}>\n                        {column.render('Header')}\n                      </div>\n                    )}\n                    {column.canResize && <ResizeHandle column={column} />}\n                  </div>\n                )\n              })}\n            </div>\n          ))}\n        </div>\n        <div {...getTableBodyProps()} className={classes.tableBody}>\n          {page.map((row) => {\n            prepareRow(row)\n            return (\n              <div\n                {...row.getRowProps()}\n                className={cx(classes.tableRow, {\n                  rowSelected: row.isSelected\n                })}\n              >\n                {row.cells.map((cell) => {\n                  return (\n                    <div\n                      {...cell.getCellProps(cellProps)}\n                      onClick={cellClickHandler(cell)}\n                      className={classes.tableCell}\n                    >\n                      {cell.isGrouped ? (\n                        <>\n                          <TableSortLabel\n                            classes={{\n                              iconDirectionAsc: classes.iconDirectionAsc,\n                              iconDirectionDesc: classes.iconDirectionDesc\n                            }}\n                            active\n                            direction={row.isExpanded ? 'desc' : 'asc'}\n                            IconComponent={KeyboardArrowUp}\n                            {...row.getToggleRowExpandedProps()}\n                            className={classes.cellIcon}\n                          />{' '}\n                          {cell.render('Cell')} ({row.subRows.length})\n                        </>\n                      ) : cell.isAggregated ? (\n                        cell.render('Aggregated')\n                      ) : cell.isPlaceholder ? null : (\n                        cell.render('Cell')\n                      )}\n                    </div>\n                  )\n                })}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n      <TablePagination<T> instance={instance} />\n      <DumpInstance enabled instance={instance} />\n    </>\n  )\n}\n",["117","118"],"/Users/alex/workspace/tksh/pwa-frontend/src/components/Table/FilterChipBar.tsx",[],["119","120"],"/Users/alex/workspace/tksh/pwa-frontend/src/reportWebVitals.ts",[],"/Users/alex/workspace/tksh/pwa-frontend/src/serviceWorkerRegistration.ts",[],"/Users/alex/workspace/tksh/pwa-frontend/src/components/Table/TableStyles.tsx",[],{"ruleId":"121","replacedBy":"122"},{"ruleId":"123","replacedBy":"124"},{"ruleId":"125","severity":1,"message":"126","line":10,"column":8,"nodeType":"127","messageId":"128","endLine":10,"endColumn":16},{"ruleId":"121","replacedBy":"129"},{"ruleId":"123","replacedBy":"130"},{"ruleId":"121","replacedBy":"131"},{"ruleId":"123","replacedBy":"132"},{"ruleId":"121","replacedBy":"133"},{"ruleId":"123","replacedBy":"134"},{"ruleId":"125","severity":1,"message":"135","line":89,"column":20,"nodeType":"127","messageId":"128","endLine":89,"endColumn":21},{"ruleId":"136","severity":1,"message":"137","line":177,"column":17,"nodeType":"127","messageId":"138","endLine":177,"endColumn":22},{"ruleId":"121","replacedBy":"139"},{"ruleId":"123","replacedBy":"140"},{"ruleId":"121","replacedBy":"141"},{"ruleId":"123","replacedBy":"142"},"no-native-reassign",["143"],"no-negated-in-lhs",["144"],"@typescript-eslint/no-unused-vars","'HomeIcon' is defined but never used.","Identifier","unusedVar",["143"],["144"],["143"],["144"],["143"],["144"],"'T' is defined but never used.","@typescript-eslint/no-redeclare","'Table' is already defined.","redeclared",["143"],["144"],["143"],["144"],"no-global-assign","no-unsafe-negation"]